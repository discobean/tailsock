#!/usr/bin/env python2.7
import tailer, socket, sys, getopt, os, glob
from bottle.ext.websocket import GeventWebSocketServer, websocket
from bottle import get, run, template
from jinja2 import Template
from multiprocessing import Process

### Options
port = None # specify a port number, default is random open port
initial_print = 200 # number of lines to load initially tail -n / head -n

def usage():
    print "Usage: %s [-p <port>] [-n <num>] -f <file/dir/glob>" % sys.argv[0]
    print "       -p <port> : specify port number, default random"
    print "       -n <num>  : number of rows to show initially, default 200"
    sys.exit(1)

def get_my_ip():
    return socket.gethostbyname(socket.gethostname())

def get_open_port():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("",0))
    s.listen(1)
    port = s.getsockname()[1]
    s.close()
    return port

def tailer_process(filename, ws):
    for line in tailer.follow(open(filename)):
        ws.send(line)

@get('/get/<filename>/tail', apply=[websocket])
def echo(ws, filename):
    dirname = os.path.dirname(directory)

    tailfilename = "%s/%s" % (dirname, filename)

    for line in tailer.tail(open(tailfilename), initial_print):
        ws.send(line)

    process = Process(target=tailer_process, args=(tailfilename, ws))
    process.start()

    while True:
        msg = ws.receive()

    if msg is None:
        process.terminate()

@get('/get/<filename>')
def index(filename):

    t = Template("""
<!doctype html>
<html>
<head>
  <title>{{hostname}}:{{filename}}</title>
  <style>p { display: block; unicode-bidi: embed; font-family: monospace; white-space: pre; margin: 0; padding: 0; }</style>
</head>
<body>
<div id="logdata" />
<script>
  // convert the protocol of the URI to ws or wss
  var loc = window.location, ws_uri;
  ws_uri = "ws://" + loc.host + loc.pathname + "/tail";
  var ws = new WebSocket(ws_uri);

  ws.onmessage = function(evt) {
    var newMessage = document.createElement('p');
    newMessage.textContent = evt.data;
    document.getElementById('logdata').appendChild(newMessage);
    window.scrollTo(0,document.body.scrollHeight);
  };
</script>
</body>
</html>
""")

    return t.render(hostname=socket.gethostname(), filename=filename)

@get('/')
def index():
    tmpfiles = glob.glob(directory)
    files = []
    for file in tmpfiles:
        files.append(os.path.basename(file))

    files = sorted(files)

    t = Template("""
<!doctype html>
<html>
<head>
  <title>{{hostname}}:{{directory}}</title>
</head>
<body>
<h1>{{hostname}}:{{directory}}</h1>
{% for file in files %}
<a href="/get/{{file}}">{{file}}</a><br />
{% endfor %}
</body>
</html>
""")

    return t.render(files=files, directory=directory, hostname=socket.gethostname())

if __name__ == '__main__':
    directory = '.'
    try:
        opts, args = getopt.getopt(sys.argv[1:],"p:f:n:h")
        for opt, arg in opts:
            if opt == '-p':
                port = arg
            if opt == '-f':
                directory = arg
            if opt == '-n':
                initial_print = int(arg)
            if opt == '-h':
                usage()

    except:
        usage()

    if port is None:
        port = get_open_port()

    if os.path.exists(directory) and os.path.isdir(directory):
        directory = directory + '/*'

    myip = get_my_ip()
    print "http://%s:%s" % (myip, port)
    run(host='0.0.0.0', port=port, server=GeventWebSocketServer, quiet=True)

